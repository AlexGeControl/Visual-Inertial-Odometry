%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/cam0/image_raw"
output_path: "/home/hyj/slam_course_vins"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 640
distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
   fx: 460.0
   fy: 460.0
   cx: 255.0
   cy: 255.0

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.0, 0.0, -1.0,
          -1.0, 0.0,  0.0, 
           0.0, 1.0,  0.0]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.05, 0.04, 0.03]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 30                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters   The more accurate parameters you provide, the better performance
# noise-free:
acc_n: 0.2687       # acc_noise_sigma * sqrt(1.0/imu_frequency).
gyr_n: 0.2121       # gyro_noise_sigma * sqrt(1.0/imu_frequency).     
acc_w: 7.07e-6      # acc_bias_sigma / sqrt(1.0/imu_frequency).
gyr_w: 7.07e-7      # gyro_bias_sigma / sqrt(1.0/imu_frequency).
# a. proper noise level:
# acc_n: 0.2687       # acc_noise_sigma * sqrt(1.0/imu_frequency).
# gyr_n: 0.2121       # gyro_noise_sigma * sqrt(1.0/imu_frequency).     
# acc_w: 7.07e-6      # acc_bias_sigma / sqrt(1.0/imu_frequency).
# gyr_w: 7.07e-7      # gyro_bias_sigma / sqrt(1.0/imu_frequency).
# b. under-estimate:
# acc_n: 0.08956      # 0.333 * acc_noise_sigma * sqrt(1.0/imu_frequency).
# gyr_n: 0.07071      # 0.333 * gyro_noise_sigma * sqrt(1.0/imu_frequency).     
# acc_w: 2.357e-6     # 0.333 * acc_bias_sigma / sqrt(1.0/imu_frequency).
# gyr_w: 2.357e-7     # 0.333 * gyro_bias_sigma / sqrt(1.0/imu_frequency).
# c. over-estimate:
# acc_n: 0.8061       # 3.0 * acc_noise_sigma * sqrt(1.0/imu_frequency).
# gyr_n: 0.6364       # 3.0 * gyro_noise_sigma * sqrt(1.0/imu_frequency).     
# acc_w: 2.121e-5     # 3.0 * acc_bias_sigma / sqrt(1.0/imu_frequency).
# gyr_w: 2.121e-6     # 3.0 * gyro_bias_sigma / sqrt(1.0/imu_frequency).
g_norm: 9.81      # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/hyj/slam_course_vins/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
